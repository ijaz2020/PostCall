package com.cp.matrix;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class SurroundRegions {
  public static void main(String[] args){
    char[][] board = {
      {
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O',
        'X',
        'O',
        'O',
        'O',
        'O',
        'O'}
        ,
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'X',
          'O',
          'O',
          'X',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'X',
          'O'
        },
        {
          'O',
          'X',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'X',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'O',
          'X',
          'O',
          'O'
        },
        {
          'O',
          'X',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'X',
          'X',
          'O',
          'O',
          'O',
          'X',
          'O',
          'O',
          'X',
          'O',
          'O',
          'X'
        },
        {
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O',
          'O'
        }
      };

    new SurroundRegions().solve(board);
    System.out.println(Arrays.deepToString(board));
  }

  public void solve(char[][] board) {
    if( board.length == 0 || board[0].length == 0) return;
    int m = board.length, n = board[0].length;
    boolean[][] dp = new boolean[m][n];
    for(int i=0; i<m; i++){
      for(int j=0; j<n; j++){
        if( board[i][j] == 'O' && !dp[i][j]){
          fill(i, j,board, dp);
        }
      }
    }
  }

  private void fill(int i, int j, char[][] board, boolean[][] dp){
    boolean flag = false;
    int m = board.length, n = board[0].length;
    Queue<int[]> result = new LinkedList<>();
    Queue<int[]> q = new LinkedList<>();
    q.offer(new int[]{i, j});
    dp[i][j] = true;
    while(!q.isEmpty()){
      int[] curr = q.poll();
      int o = curr[0], p = curr[1];
      result.offer(curr);
      if( o == 0 || p==0 || o == m-1 || p == n-1) flag =true;

      int[][] dirs = {{0,1}, {1,0}, {-1,0}, {0, -1}};
      for(int[] dir : dirs){
        int x = curr[0] + dir[0], y = curr[1] + dir[1];
        if(x < 0 || x>=m || y <0 || y>=n || board[x][y] == 'X' || dp[x][y])continue;
        dp[x][y] = true;
        q.offer(new int[]{x, y});
      }
    }
    if(!flag){
      while(!result.isEmpty()){
        int[] curr = result.poll();
        board[curr[0]][curr[1]] = 'X';
      }
    }
  }
}
