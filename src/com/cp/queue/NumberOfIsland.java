package com.cp.queue;

import java.util.LinkedList;
import java.util.Queue;

public class NumberOfIsland {
  public static void main(String[] args) {
    char[][] grid ={  {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
                      {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
                      {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
                      {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                      {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                      {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
                      {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
                      {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
                      {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
                      {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                      {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
                      {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                      {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                      {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
                      {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
                      {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
                      {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
                      {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                      {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                      {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}};
    System.out.println(new NumberOfIsland().numIslands(grid));
  }

  int[][] dirs = {{0,1}, {1,0}, {-1,0}, {0,-1}};
  public int numIslands(char[][] grid) {
    if(grid.length == 0) return 0;
    int m= grid.length, n = grid[0].length, res =0 ;
    for(int i=0; i<m; i++){
      for(int j=0; j<n; j++){
        if(grid[i][j] =='1'){
          res++;
          checkNeighbour(i, j, grid);
        }
      }
    }
    return res;
  }

  private void checkNeighbour(int i, int j, char[][] grid){
    int m =grid.length, n= grid[0].length;
    Queue<int[]> q = new LinkedList<>();
    q.offer(new int[]{i, j});
    grid[i][j] ='0';
    while(!q.isEmpty()){
      int[] curr = q.poll();
      int x = curr[0], y = curr[1];
      for(int[] dir: dirs){
        int k = dir[0] + x, l = dir[1] + y;
        if(k <0 || l <0 || l >=n || k >=m || grid[k][l] =='0') continue;
        grid[k][l] ='0';
        q.offer(new int[]{k,l});
      }
    }
  }
}
